Let's Test Drive a sayHello function
We'll build up our solution incrementally, in a Test-Driven manner.
Be careful not to refactor too early. Only refactor once we have sufficient tests.
Ultimately, sayHello should say "Hello" to any string we pass to it.
We'll handle some edge cases once we've solved the heart of the matter.


Exercise #1 Take your first "Test Drive" by writing your first test!
Our next exercise is to follow the TDD workflow to develop incremental tests and solutions for testing a sayHello() function that takes in a name as an argument and returns a string that says hello to that name.

Step 1: Let's write the smallest test possible.
    1. Open up tests.js.
        a. Add a describe,
        b. an it,
        c. and an expect to assert that sayHello is a defined function. Use your tests for helloWorld as a guide.
Step 2: Run all the tests. At this point, we're expecting and hoping for a single, red failing test that we just now authored.
    Results:
        sayHello
        x should be a defined function
Step 3: Now, let's go to code.js
        a. and create an empty function definition for sayHello.
Step 4: Run all the tests. We're expecting all tests, including the new test for sayHello to be green.
    Result: All tests are green
Step 5: Given that this is our first (tiny) test and our first implementation, there is not yet the opportunity to refactor.
Step 6: The last TDD step is to "repeat" the process of adding another test. What we're going to do is add our work to git and then move to Exercise #2, which is to add the second test.
Before proceeding, add your work to GitHub!
Open your terminal and navigate to the local directory where you cloned this project.
First, git status. Notice which files are tracked by git and which files have changes.
Second, type git add -A to tell git that you want to get all the changed files staged for commit.
Now, type git status. You should see file names in green. This means that the files are ready for commit.
Next, type git commit -m "add the first test and solution for intro-to-testing"
Type git status, again, to make sure that all files are added and committed.
Finally, push your work by running git push. Pushing uploads your new commits to your remote repository, meaning your own fork on GitHub.
